# Grouping by the unique property identifiers
group_by(!!!syms(identifiersForUniqueProp)) %>%
# Arranging by date
arrange(!!!syms(identifiersForUniqueProp), dateSoldPsdData) %>%
# Using dateSoldPsdData column to calculate other columns
summarize(
firstDateSold = first(dateSoldPsdData)
, lastDateSold = last(dateSoldPsdData)
, firstSellingPrice = first(sellingPriceRawData)
, lastSellingPrice = last(sellingPriceRawData)
) %>%
# Using previously calculated columns to calculate more columns
mutate(
daysElapsed = lastDateSold - firstDateSold
, changeInValue = lastSellingPrice - firstSellingPrice) %>%
# Dropping properties that resold in less than half a year
filter(daysElapsed >= 365.25 / 2) %>%
# Using previously calculated columns to calculate more columns
# mutate(
# dailyGrowthRate =
# exp(log(lastSellingPrice / firstSellingPrice) / daysElapsed) - 1
# ) %>%
# Using previously calculated columns to calculate more columns
mutate(
dailyGrowthRate =
exp(log(lastSellingPrice / firstSellingPrice) / daysElapsed) - 1
, annualGrowthRate = (1 + dailyGrowthRate) ^ 365.25 - 1
, profitPerYear = (changeInValue) / daysElapsed * 365.25
, profitAfter1YearMinusCost = profitPerYear - firstSellingPrice
) %>%
ungroup() %>%
relocate(propertyId, profitAfter1YearMinusCost, riskToRewardAfter1Year)
preprocessedDataResoldProps %>%
# counting how many times each property appears
count(!!!syms(identifiersForUniqueProp)) %>%
# Filtering those that appear only once (not resold in my dataset)
filter(n > 1) %>%
# Dropping the column that counted the number of times they appeared in data
select(-n) %>%
# Bring back in dateSoldPsdData and sellingPriceRawData columns
inner_join(preprocessedDataResoldProps[,
c(identifiersForUniqueProp,
"dateSoldPsdData", "sellingPriceRawData")]) %>%
# Grouping by the unique property identifiers
group_by(!!!syms(identifiersForUniqueProp)) %>%
# Arranging by date
arrange(!!!syms(identifiersForUniqueProp), dateSoldPsdData) %>%
# Using previously calculated columns to calculate more columns
mutate(
firstDateSold = first(dateSoldPsdData)
, lastDateSold = last(dateSoldPsdData)
, firstSellingPrice = first(sellingPriceRawData)
, lastSellingPrice = last(sellingPriceRawData)
, daysElapsed = lastDateSold - firstDateSold
, changeInValue = lastSellingPrice - firstSellingPrice
, dailyGrowthRate =
exp(log(lastSellingPrice / firstSellingPrice) / daysElapsed) - 1
, annualGrowthRate = (1 + dailyGrowthRate) ^ 365.25 - 1
, profitPerYear = (changeInValue) / daysElapsed * 365.25
, profitAfter1YearMinusCost = profitPerYear - firstSellingPrice
) %>%
# Dropping properties that resold in less than half a year
filter(daysElapsed >= 365.25 / 2) %>%
ungroup() %>%
relocate(profitAfter1YearMinusCost, riskToRewardAfter1Year) %>%
View
preprocessedDataResoldProps %>%
# counting how many times each property appears
count(!!!syms(identifiersForUniqueProp)) %>%
# Filtering those that appear only once (not resold in my dataset)
filter(n > 1) %>%
# Dropping the column that counted the number of times they appeared in data
select(-n) %>%
# Bring back in dateSoldPsdData and sellingPriceRawData columns
inner_join(preprocessedDataResoldProps[,
c(identifiersForUniqueProp,
"dateSoldPsdData", "sellingPriceRawData")]) %>%
# Grouping by the unique property identifiers
group_by(!!!syms(identifiersForUniqueProp)) %>%
# Arranging by date
arrange(!!!syms(identifiersForUniqueProp), dateSoldPsdData) %>%
# Using previously calculated columns to calculate more columns
mutate(
firstDateSold = first(dateSoldPsdData)
, lastDateSold = last(dateSoldPsdData)
, firstSellingPrice = first(sellingPriceRawData)
, lastSellingPrice = last(sellingPriceRawData)
, daysElapsed = lastDateSold - firstDateSold
, changeInValue = lastSellingPrice - firstSellingPrice
, dailyGrowthRate =
exp(log(lastSellingPrice / firstSellingPrice) / daysElapsed) - 1
, annualGrowthRate = (1 + dailyGrowthRate) ^ 365.25 - 1
, profitPerYear = (changeInValue) / daysElapsed * 365.25
, profitAfter1YearMinusCost = profitPerYear - firstSellingPrice
) %>%
# Dropping properties that resold in less than half a year
filter(daysElapsed >= 365.25 / 2) %>%
ungroup() %>%
relocate(profitAfter1YearMinusCost) %>%
View
preprocessedDataResoldProps %>%
# counting how many times each property appears
count(!!!syms(identifiersForUniqueProp)) %>%
# Filtering those that appear only once (not resold in my dataset)
filter(n > 1) %>%
# Dropping the column that counted the number of times they appeared in data
select(-n) %>%
# Bring back in dateSoldPsdData and sellingPriceRawData columns
inner_join(preprocessedDataResoldProps[,
c(identifiersForUniqueProp,
"dateSoldPsdData", "sellingPriceRawData")]) %>%
# Grouping by the unique property identifiers
group_by(!!!syms(identifiersForUniqueProp)) %>%
# Arranging by date
arrange(!!!syms(identifiersForUniqueProp), dateSoldPsdData)
preprocessedDataResoldProps %>%
# counting how many times each property appears
count(!!!syms(identifiersForUniqueProp)) %>%
# Filtering those that appear only once (not resold in my dataset)
filter(n > 1) %>%
# Dropping the column that counted the number of times they appeared in data
select(-n) %>%
# Bring back in dateSoldPsdData and sellingPriceRawData columns
inner_join(preprocessedDataResoldProps[,
c(identifiersForUniqueProp,
"dateSoldPsdData", "sellingPriceRawData")]) %>%
# Grouping by the unique property identifiers
group_by(!!!syms(identifiersForUniqueProp)) %>%
# Arranging by date
arrange(!!!syms(identifiersForUniqueProp), dateSoldPsdData) %>%
# Using dateSoldPsdData column to calculate other columns
summarize(
firstDateSold = first(dateSoldPsdData)
, lastDateSold = last(dateSoldPsdData)
, firstSellingPrice = first(sellingPriceRawData)
, lastSellingPrice = last(sellingPriceRawData)
) %>%
# Calculating various other columns
mutate(
daysElapsed = lastDateSold - firstDateSold
, changeInValue = lastSellingPrice - firstSellingPrice
, dailyGrowthRate =
exp(log(lastSellingPrice / firstSellingPrice) / daysElapsed) - 1
, annualGrowthRate = (1 + dailyGrowthRate) ^ 365.25 - 1
, profitPerYear = (changeInValue) / daysElapsed * 365.25
, profitAfter1YearMinusCost = profitPerYear - firstSellingPrice
) %>%
# Dropping properties that resold in less than half a year
filter(daysElapsed >= 365.25 / 2) %>%
ungroup() %>%
relocate(profitAfter1YearMinusCost, riskToRewardAfter1Year)
preprocessedDataResoldProps %>%
# counting how many times each property appears
count(!!!syms(identifiersForUniqueProp)) %>%
# Filtering those that appear only once (not resold in my dataset)
filter(n > 1) %>%
# Dropping the column that counted the number of times they appeared in data
select(-n) %>%
# Bring back in dateSoldPsdData and sellingPriceRawData columns
inner_join(preprocessedDataResoldProps[,
c(identifiersForUniqueProp,
"dateSoldPsdData", "sellingPriceRawData")]) %>%
# Grouping by the unique property identifiers
group_by(!!!syms(identifiersForUniqueProp)) %>%
# Arranging by date
arrange(!!!syms(identifiersForUniqueProp), dateSoldPsdData) %>%
# Using dateSoldPsdData column to calculate other columns
summarize(
firstDateSold = first(dateSoldPsdData)
, lastDateSold = last(dateSoldPsdData)
, firstSellingPrice = first(sellingPriceRawData)
, lastSellingPrice = last(sellingPriceRawData)
) %>%
# Calculating various other columns
mutate(
daysElapsed = lastDateSold - firstDateSold
, changeInValue = lastSellingPrice - firstSellingPrice
, dailyGrowthRate =
exp(log(lastSellingPrice / firstSellingPrice) / daysElapsed) - 1
, annualGrowthRate = (1 + dailyGrowthRate) ^ 365.25 - 1
, profitPerYear = (changeInValue) / daysElapsed * 365.25
, profitAfter1YearMinusCost = profitPerYear - firstSellingPrice
) %>%
# Dropping properties that resold in less than half a year
filter(daysElapsed >= 365.25 / 2) %>%
ungroup() %>%
relocate(profitAfter1YearMinusCost)
preprocessedDataResoldProps %>%
# counting how many times each property appears
count(!!!syms(identifiersForUniqueProp)) %>%
# Filtering those that appear only once (not resold in my dataset)
filter(n > 1) %>%
# Dropping the column that counted the number of times they appeared in data
select(-n) %>%
# Bring back in dateSoldPsdData and sellingPriceRawData columns
inner_join(preprocessedDataResoldProps[,
c(identifiersForUniqueProp,
"dateSoldPsdData", "sellingPriceRawData")]) %>%
# Grouping by the unique property identifiers
group_by(!!!syms(identifiersForUniqueProp)) %>%
# Arranging by date
arrange(!!!syms(identifiersForUniqueProp), dateSoldPsdData) %>%
# Using dateSoldPsdData column to calculate other columns
summarize(
firstDateSold = first(dateSoldPsdData)
, lastDateSold = last(dateSoldPsdData)
, firstSellingPrice = first(sellingPriceRawData)
, lastSellingPrice = last(sellingPriceRawData)
) %>%
# Calculating various other columns
mutate(
daysElapsed = lastDateSold - firstDateSold
, changeInValue = lastSellingPrice - firstSellingPrice
, dailyGrowthRate =
exp(log(lastSellingPrice / firstSellingPrice) / daysElapsed) - 1
, annualGrowthRate = (1 + dailyGrowthRate) ^ 365.25 - 1
, profitPerYear = (changeInValue) / daysElapsed * 365.25
, profitAfter1YearMinusCost = profitPerYear - firstSellingPrice
) %>%
# Dropping properties that resold in less than half a year
filter(daysElapsed >= 365.25 / 2) %>%
ungroup() %>%
relocate(profitAfter1YearMinusCost) %>%
View
preprocessedDataResoldProps %>%
# counting how many times each property appears
count(!!!syms(identifiersForUniqueProp)) %>%
# Filtering those that appear only once (not resold in my dataset)
filter(n > 1) %>%
# Dropping the column that counted the number of times they appeared in data
select(-n) %>%
# Bring back in dateSoldPsdData and sellingPriceRawData columns
inner_join(preprocessedDataResoldProps[,
c(identifiersForUniqueProp,
"dateSoldPsdData", "sellingPriceRawData")]) %>%
# Grouping by the unique property identifiers
group_by(!!!syms(identifiersForUniqueProp)) %>%
# Arranging by date
arrange(!!!syms(identifiersForUniqueProp), dateSoldPsdData) %>%
# Using dateSoldPsdData column to calculate other columns
summarize(
firstDateSold = first(dateSoldPsdData)
, lastDateSold = last(dateSoldPsdData)
, firstSellingPrice = first(sellingPriceRawData)
, lastSellingPrice = last(sellingPriceRawData)
) %>%
# Calculating various other columns
mutate(
daysElapsed = lastDateSold - firstDateSold
, changeInValue = lastSellingPrice - firstSellingPrice
, dailyGrowthRate =
exp(log(lastSellingPrice / firstSellingPrice) / daysElapsed) - 1
, annualGrowthRate = (1 + dailyGrowthRate) ^ 365.25 - 1
, valueIncreasePerYear = (changeInValue) / daysElapsed * 365.25
, valueIncreaseAfter1YearMinusCost = valueIncreasePerYear - firstSellingPrice
) %>%
# Dropping properties that resold in less than half a year
filter(daysElapsed >= 365.25 / 2) %>%
# Ungrouping data
ungroup() %>%
# Moving the column that I want to predict to the front
relocate(profitAfter1YearMinusCost) %>%
# Dropping columns that won't be used in my predictive model
select(
-firstDateSold
) %>%
View
preprocessedDataResoldProps %>%
# counting how many times each property appears
count(!!!syms(identifiersForUniqueProp)) %>%
# Filtering those that appear only once (not resold in my dataset)
filter(n > 1) %>%
# Dropping the column that counted the number of times they appeared in data
select(-n) %>%
# Bring back in dateSoldPsdData and sellingPriceRawData columns
inner_join(preprocessedDataResoldProps[,
c(identifiersForUniqueProp,
"dateSoldPsdData", "sellingPriceRawData")]) %>%
# Grouping by the unique property identifiers
group_by(!!!syms(identifiersForUniqueProp)) %>%
# Arranging by date
arrange(!!!syms(identifiersForUniqueProp), dateSoldPsdData) %>%
# Using dateSoldPsdData column to calculate other columns
summarize(
firstDateSold = first(dateSoldPsdData)
, lastDateSold = last(dateSoldPsdData)
, firstSellingPrice = first(sellingPriceRawData)
, lastSellingPrice = last(sellingPriceRawData)
) %>%
# Calculating various other columns
mutate(
daysElapsed = lastDateSold - firstDateSold
, changeInValue = lastSellingPrice - firstSellingPrice
, dailyGrowthRate =
exp(log(lastSellingPrice / firstSellingPrice) / daysElapsed) - 1
, annualGrowthRate = (1 + dailyGrowthRate) ^ 365.25 - 1
, valueIncreasePerYear = (changeInValue) / daysElapsed * 365.25
, valueIncreaseAfter1YearMinusCost = valueIncreasePerYear - firstSellingPrice
) %>%
# Dropping properties that resold in less than half a year
filter(daysElapsed >= 365.25 / 2) %>%
# Ungrouping data
ungroup() %>%
# Moving the column that I want to predict to the front
relocate(valueIncreaseAfter1YearMinusCost) %>%
# Dropping columns that won't be used in my predictive model
select(
-firstDateSold
) %>%
View
preprocessedDataResoldProps %>%
# counting how many times each property appears
count(!!!syms(identifiersForUniqueProp)) %>%
# Filtering those that appear only once (not resold in my dataset)
filter(n > 1) %>%
# Dropping the column that counted the number of times they appeared in data
select(-n) %>%
# Bring back in dateSoldPsdData and sellingPriceRawData columns
inner_join(preprocessedDataResoldProps[,
c(identifiersForUniqueProp,
"dateSoldPsdData", "sellingPriceRawData")]) %>%
# Grouping by the unique property identifiers
group_by(!!!syms(identifiersForUniqueProp)) %>%
# Arranging by date
arrange(!!!syms(identifiersForUniqueProp), dateSoldPsdData) %>%
# Using dateSoldPsdData column to calculate other columns
summarize(
firstDateSold = first(dateSoldPsdData)
, lastDateSold = last(dateSoldPsdData)
, firstSellingPrice = first(sellingPriceRawData)
, lastSellingPrice = last(sellingPriceRawData)
) %>%
# Calculating various other columns
mutate(
daysElapsed = lastDateSold - firstDateSold
, changeInValue = lastSellingPrice - firstSellingPrice
, dailyGrowthRate =
exp(log(lastSellingPrice / firstSellingPrice) / daysElapsed) - 1
, annualGrowthRate = (1 + dailyGrowthRate) ^ 365.25 - 1
, valueIncreasePerYear = (changeInValue) / daysElapsed * 365.25
, valueIncreaseAfter1YearMinusCost = valueIncreasePerYear - firstSellingPrice
) %>%
# Dropping properties that resold in less than half a year
filter(daysElapsed >= 365.25 / 2) %>%
# Ungrouping data
ungroup() %>%
# Moving the column that I want to predict to the front
relocate(valueIncreaseAfter1YearMinusCost) %>%
# Dropping columns that won't be used in my predictive model
select(
-firstDateSold
, -lastDateSold
, -firstSellingPrice
, -lastSellingPrice
, -daysElapsed
, -changeInValue
, -dailyGrowthRate
, annualGrowthRate
, valueIncreasePerYear
)  %>%
View
# 01 Ensure all pkgs in this script are installed ####
pkgs <-
c(
"htmlwidgets"
, "sqldf"
)
activatePkgs(pkgs)
# 02 load latest preprocessed data ####
preprocessedData <-
paste0(
outFolderPreprocessedAllData,
list.files(outFolderPreprocessedAllData) %>%
.[length(.)]
) %>%
readRDS()
# 03 Testing data classes ####
allNumericVars <-
preprocessedData %>%
select_if(is.numeric) %>%
names
allFactorVars <-
preprocessedData %>%
select_if(is.factor) %>%
names()
allOtherVars <-
preprocessedData %>%
select(!c(allNumericVars, allFactorVars)) %>%
names
# Purpose: Plot some of my features to get a sense of the data
# Author: David Gray Lassiter, PhD
# Date: 2020-sep-22
# Version:
# Revisions:
# Author:
# Date: YYYY-MMM-DD
# Revised Version:
# 01 Ensure all pkgs in this script are installed ####
pkgs <-
c(
"htmlwidgets"
, "sqldf"
)
activatePkgs(pkgs)
# 02 load latest preprocessed data ####
preprocessedData <-
paste0(
outFolderPreprocessedAllData,
list.files(outFolderPreprocessedAllData) %>%
.[length(.)]
) %>%
readRDS()
# 03 Testing data classes ####
allNumericVars <-
preprocessedData %>%
select_if(is.numeric) %>%
names
allFactorVars <-
preprocessedData %>%
select_if(is.factor) %>%
names()
allOtherVars <-
preprocessedData %>%
select(!c(allNumericVars, allFactorVars)) %>%
names
if (length(allOtherVars) > 0) message("Some variables are misclassified")
# 06 Variables for density plots ####
allVars <-
names(preprocessedData)
originalVars <-
str_subset(allVars, "RawData")
originalNumericVars <-
intersect(originalVars, allNumericVars)
engnrdVars <-
str_subset(allVars, "PsdData")
engnrdNumericVars <-
intersect(engnrdVars, allNumericVars)
engnrdNumericAggByCat <-
str_subset(engnrdNumericVars, "Mean|Median|Sum")
engnrdNumericNotAggByCat <-
setdiff(engnrdNumericVars, engnrdNumericAggByCat)
numericVarsForDensityPlots <-
sort(c(originalNumericVars, engnrdNumericNotAggByCat))
# 07 Cat variables for violin, strip, and conditional density plots ####
engnrdFactorVars <-
intersect(engnrdVars, allFactorVars)
catVarsForPlots <-
engnrdFactorVars %>%
str_subset("Ohe", negate = T) %>%
str_subset("monthSoldEnglish", negate = T) %>%
str_subset("Generalized|Sold") %>%
c("cityRawData", .)
# 08 Con variables for violin, strip, and conditional density plots ####
engnrdNonhalfNotDropped <-
engnrdNumericNotAggByCat %>%
str_subset("floor") %>%
str_subset("Nonhalf", negate = T)
conVarsForPlots <-
str_subset(engnrdNumericNotAggByCat, "Imputed") %>%
setdiff(engnrdNonhalfNotDropped) %>%
sort %>%
c("sellingPriceRawData", .)
# 09 Variables for heatmaps ####
discreteVarsForHeatmaps <-
str_subset(conVarsForPlots, "kvm|room|floor") %>%
str_subset("avgift|runningCosts", negate = T) %>%
c(catVarsForPlots, "yearSoldRawData")
conVarsForAggs <-
engnrdNumericVars %>%
str_subset("mean|median|sum") %>%
str_subset("agoPsdData|daysPsdData", negate = T)
catVarsForAggPlots <-
catVarsForPlots %>%
str_subset(catVarsForTimeSeriesAnalysis)
catVarsForAggPlots
# 10 Variables for building predictive models ####
# predictorVars <-
union(c("a", "b"), c("b", "c"))
union(catVarsForPlots, conVarsForPlots, catVarsForAggPlots, conVarsForAggs, discreteVarsForHeatmaps)
catVarsForPlots
conVarsForPlots
catVarsForAggPlots
conVarsForAggs
discreteVarsForHeatmaps
engnrdNumericVars
conVarsForAggs <-
engnrdNumericVars %>%
str_subset("Mean|Median|Sum") %>%
str_subset("agoPsdData|daysPsdData", negate = T)
# 10 Variables for building predictive models ####
# predictorVars <-
union(catVarsForPlots, conVarsForPlots, catVarsForAggPlots, conVarsForAggs, discreteVarsForHeatmaps)
conVarsForAggs
# 10 Variables for building predictive models ####
# predictorVars <-
union_all(catVarsForPlots, conVarsForPlots, catVarsForAggPlots, conVarsForAggs, discreteVarsForHeatmaps)
# 10 Variables for building predictive models ####
# predictorVars <-
union_all(catVarsForPlots, conVarsForPlots, catVarsForAggPlots, conVarsForAggs, discreteVarsForHeatmaps) %>%
str_subset("RawData")
union_all(c("a", "b"), c("b", "c"))
# 10 Variables for building predictive models ####
# predictorVars <-
union_all(catVarsForPlots, conVarsForPlots, catVarsForAggPlots, conVarsForAggs, discreteVarsForHeatmaps) %>%
unique %>%
str_subset("RawData")
# 10 Variables for building predictive models ####
predictorVars <-
union_all(catVarsForPlots, conVarsForPlots, catVarsForAggPlots, conVarsForAggs, discreteVarsForHeatmaps) %>%
unique %>%
str_subset("sellingPriceRawData", negate = T)
varToPredict2 <- "sellingPriceRawData"
